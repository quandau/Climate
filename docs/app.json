[{"name":"app.R","content":"library(shinydashboard)\r\nlibrary(shiny)\r\nlibrary(leaflet)\r\nlibrary(tidyhydat)\r\nlibrary(weathercan)\r\nlibrary(plotly)\r\n\r\n\r\nui <- dashboardPage(\r\n  dashboardHeader(title = \"Climate Portal\"),\r\n  dashboardSidebar(sidebarMenu(\r\n    id = \"climate\",\r\n    img(src = 'https://i0.wp.com/climatesmartlab.upei.ca/files/2022/04/cropped-cls_b.png?fit=200%2C70&ssl=1'),\r\n    br(),\r\n    menuItem(\r\n      \"Meteological\",\r\n      tabName = \"met\",\r\n      icon = icon(\"cloud-sun-rain\")\r\n    ),\r\n    menuItem(\r\n      \"Hydrometric\",\r\n      tabName = \"hyd\",\r\n      icon = icon(\"house-tsunami\")\r\n    )\r\n  )),\r\n  dashboardBody(tabItems(\r\n    tabItem(\r\n      tabName = \"met\",\r\n      fluidRow(column(\r\n        3,\r\n        box(\r\n          title = \"Search Data\",\r\n          width = 12,\r\n          status = \"primary\",\r\n          solidHeader = TRUE,\r\n          \r\n          textInput(\"search_station\", \"Search Station\"),\r\n          radioButtons(\r\n            \"interval\",\r\n            \"Interval\",\r\n            choices = c(\"hour\", \"day\", \"month\"),\r\n            inline = TRUE\r\n          ),\r\n          selectizeInput(\"station\", \"Station\", choices = NULL),\r\n          dateRangeInput(\"daterange2\", \"Date range:\"),\r\n          actionButton(\"valid\", \"Validate\", class = \"btn-primary btn-lg\"),\r\n          downloadButton(\"down\", \"Download\")\r\n        )\r\n      ),\r\n      box(\r\n        width = 9,\r\n        column(6,\r\n               \r\n               tableOutput(\"data_table\")),\r\n        column(6,\r\n               \r\n               leafletOutput(\"map\"))\r\n      )),\r\n      box(\r\n        width = 12,\r\n        tableOutput(\"select_table\"),\r\n        textOutput(\"prov\"),\r\n        fluidRow(column(6, plotlyOutput(\"prec_map\")),\r\n                 column(6, plotlyOutput(\"temp_map\")))\r\n      ),\r\n      \r\n    ),\r\n    tabItem(tabName = \"hyd\",\r\n            \r\n            fluidRow(\r\n              column(\r\n                3,\r\n                box(\r\n                  title = \"Search Data\",\r\n                  width = 12,\r\n                  status = \"primary\",\r\n                  solidHeader = TRUE,\r\n                  \r\n                  selectizeInput(\r\n                    \"province\",\r\n                    \"Province\",\r\n                    choices = c(\r\n                      \"AB\",\r\n                      \"BC\",\r\n                      \"MB\",\r\n                      \"NB\",\r\n                      \"NL\",\r\n                      \"NT\",\r\n                      \"NS\",\r\n                      \"NU\",\r\n                      \"ON\",\r\n                      \"PE\",\r\n                      \"QC\",\r\n                      \"SK\",\r\n                      \"YT\"\r\n                    ),\r\n                    selected = \"PE\"\r\n                  ),\r\n                  selectizeInput(\"streamstation\", \"Station\", choices = NULL),\r\n                  selectizeInput(\"param\", \"Parameter\", choices = NULL),\r\n                  dateRangeInput(\"daterange_stream\", \"Date range:\"),\r\n                  actionButton(\"valid_stream\", \"Validate\", class = \"btn-primary btn-lg\"),\r\n                  downloadButton(\"down_stream\", \"Download\")\r\n                )\r\n              ),\r\n              box(\r\n                width = 9,\r\n                column(width = 6,\r\n                       tableOutput(\"station_table\")),\r\n                column(width = 6,\r\n                       leafletOutput(\"map_stream\"))\r\n              )\r\n              \r\n            ),\r\n            \r\n            fluidRow(\r\n              box(\r\n                width = 12,\r\n                status = \"primary\",\r\n                column(\r\n                  4,\r\n                  tableOutput(\"select_table_stream\"),\r\n                  textOutput(\"prov_stream\")\r\n                ),\r\n                column(8,\r\n                       plotlyOutput(\"stream_map\"))\r\n              )\r\n            ))\r\n  ))\r\n)\r\n\r\n\r\nserver <- function(input, output, session) {\r\n    observe({\r\n      # updateSelectizeInput(session, \"prov\", choices = stations_search(input$search_station, interval = input$interval)[1])\r\n      updateSelectizeInput(session,\r\n                           \"station\",\r\n                           choices =  stations_search(input$search_station, interval = input$interval)[3])\r\n      \r\n    })\r\n    \r\n    \r\n    output$data_table <- renderTable({\r\n      head(stations_search(input$search_station, interval = input$interval))[, c(1:4,  7, 8, 11)]\r\n    })\r\n    \r\n    output$map <- renderLeaflet({\r\n      out <-\r\n        head(stations_search(input$search_station, interval = input$interval))\r\n      if (is.null(out) || nrow(out) == 0) {\r\n        return(NULL)\r\n      }\r\n      leaflet(out, options = leafletOptions(attributionControl = FALSE)) %>% addTiles() %>%\r\n        addCircleMarkers(\r\n          lng = ~ lon,\r\n          lat = ~ lat,\r\n          popup = ~ as.character(paste(\"Station ID: \", station_id))\r\n          \r\n        )\r\n    })\r\n    \r\n    observe({\r\n      observeEvent(input$valid, {\r\n        showModal(modalDialog(\r\n          \"Patience is the key to success \" ,\r\n          img(src = 'https://media.tenor.com/1rwOYKmmEN4AAAAj/loading.gif'),\r\n          footer =\r\n            NULL\r\n        ))\r\n        \r\n        data <-\r\n          weather_dl(\r\n            station_ids = input$station,\r\n            start = input$daterange2[1],\r\n            end = input$daterange2[2],\r\n            interval = input$interval\r\n          )\r\n        \r\n        # })\r\n        output$select_table <- renderTable({\r\n          if (is.null(data)) {\r\n            return(NULL)  # Return NULL if data is NULL\r\n          } else {\r\n            return(head(data))  # Render the head of the data if it exists\r\n          }\r\n          \r\n          \r\n        })\r\n        \r\n        output$prov <- renderText({\r\n          if (is.null(data)) {\r\n            return(\"No Data\")  # Render \"No Data\" if data is NULL\r\n          } else {\r\n            return(\r\n              paste(\r\n                \"Selected data contains \",\r\n                nrow(data),\r\n                \" rows, available from \",\r\n                data[1,]$day,\r\n                \"/\",\r\n                data[1,]$month ,\r\n                \"/\",\r\n                data[1,]$year,\r\n                \"-\",\r\n                data[nrow(data),]$day,\r\n                \"/\",\r\n                data[nrow(data),]$month ,\r\n                \"/\",\r\n                data[nrow(data),]$year\r\n              )\r\n            )  # Render empty text if data exists\r\n          }\r\n        })\r\n        \r\n        \r\n        output$prec_map <- renderPlotly({\r\n          # Print structure of data frame to check column names\r\n          print(str(data))\r\n          \r\n          # Check if 'precip_amt' column exists in data frame\r\n          if (!\"precip_amt\" %in% colnames(data)) {\r\n            stop(\"\")\r\n          }\r\n          p <- ggplot(data, aes(x = time, y = precip_amt)) +\r\n            geom_line(aes(y = precip_amt), color = \"#004955\") +\r\n            theme_few(base_size = 10) +\r\n            ylab(\"Precipitation\")\r\n          plotly::ggplotly(p) %>%\r\n            config(displaylogo = F)\r\n        })\r\n        \r\n        output$temp_map <- renderPlotly({\r\n          print(str(data))\r\n          # Check if 'precip_amt' column exists in data frame\r\n          if (!\"precip_amt\" %in% colnames(data)) {\r\n            stop(\"\")\r\n          }\r\n          p <- ggplot(data, aes(x = time, y = precip_amt)) +\r\n            geom_line(aes(y = temp), color = \"#001fff\") +\r\n            theme_few(base_size = 10) +\r\n            ylab(\"Temperature\")\r\n          plotly::ggplotly(p) %>%\r\n            config(displaylogo = F)\r\n        })\r\n        \r\n        removeModal()\r\n        \r\n        \r\n        output$down <- downloadHandler(\r\n          filename = function() {\r\n            paste(\r\n              \"data-\",\r\n              input$station,\r\n              \"-\",\r\n              input$daterange2[1],\r\n              \"-\",\r\n              input$daterange2[2],\r\n              \".csv\",\r\n              sep = \"\"\r\n            )\r\n          },\r\n          content = function(file) {\r\n            write.csv(data, file)\r\n          }\r\n        )\r\n        \r\n      })\r\n      \r\n      \r\n      \r\n    })\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    ###############################HYDROCLIMATE\r\n    observe({\r\n      updateSelectizeInput(session,\r\n                           \"streamstation\",\r\n                           choices =  realtime_stations(prov_terr_state_loc = input$province)[1])\r\n      \r\n      updateSelectizeInput(session,\r\n                           \"param\",\r\n                           choices =  param_id[4])\r\n      \r\n      \r\n      output$station_table <- renderTable({\r\n        head(realtime_stations(prov_terr_state_loc = input$province))[, c(1:4)]\r\n      })\r\n      \r\n    })\r\n    \r\n    output$map_stream <- renderLeaflet({\r\n      out2 <-\r\n        realtime_stations(prov_terr_state_loc = input$province)\r\n      if (is.null(out2) || nrow(out2) == 0) {\r\n        return(NULL)\r\n      }\r\n      leaflet(out2, options = leafletOptions(attributionControl = FALSE)) %>% addTiles() %>%\r\n        addCircleMarkers(\r\n          lng = ~ LONGITUDE,\r\n          lat = ~ LATITUDE,\r\n          popup = ~ as.character(paste(\r\n            \"Station ID: \", STATION_NUMBER, \"-\", STATION_NAME\r\n          ))\r\n          \r\n        )\r\n    })\r\n    \r\n    \r\n    \r\n    observe({\r\n      observeEvent(input$valid_stream, {\r\n        showModal(modalDialog(\r\n          \"Patience is the key to success\",\r\n          img(src = 'https://media.tenor.com/1rwOYKmmEN4AAAAj/loading.gif'),\r\n          footer = NULL\r\n        ))\r\n        \r\n        data <- tryCatch({\r\n          realtime_ws(\r\n            station_number = input$streamstation,\r\n            parameters = as.numeric(filter(param_id, Name_En == input$param)[1]),\r\n            end_date = input$daterange_stream[2],\r\n            start_date = input$daterange_stream[1]\r\n          )\r\n        }, error = function(e) {\r\n          showModal(\r\n            modalDialog(\r\n              \"Error: No data retrieved for the selected station query!\",\r\n              footer = tagList(\r\n                actionButton(\"closeErrorModal\", \"Close\", class = \"btn-default\")\r\n              )\r\n            )\r\n          )\r\n          return(NULL)  # Return NULL to prevent further execution\r\n        })\r\n        \r\n        # Check if data is not NULL and proceed with rendering\r\n        if (!is.null(data) && !inherits(data, \"try-error\")) {\r\n          output$select_table_stream <- renderTable({\r\n            head(data)[, c(1:5)]\r\n          })\r\n          \r\n          \r\n          output$prov_stream <- renderText({\r\n            paste(\r\n              \"Selected data contains\",\r\n              nrow(data),\r\n              \"rows, available from\",\r\n              data[1,]$Date,\r\n              \"-\",\r\n              data[nrow(data),]$Date\r\n            )\r\n            \r\n          })\r\n          \r\n          output$stream_map <- renderPlotly({\r\n            p <- ggplot(data, aes(x = Date, y = Value)) +\r\n              geom_line(aes(y = Value), color = \"#002777\") +\r\n              theme_few(base_size = 10) +\r\n              ylab(input$param)\r\n            plotly::ggplotly(p) %>%\r\n              config(displaylogo = F)\r\n          })\r\n          \r\n          \r\n          \r\n          # Remove modal dialog after rendering\r\n          removeModal()\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        # Download handler for downloading data as CSV\r\n        output$down_stream <- downloadHandler(\r\n          filename = function() {\r\n            paste(\r\n              \"data-\",\r\n              input$streamstation,\r\n              \"-\",\r\n              input$daterange_stream[1],\r\n              \"-\",\r\n              input$daterange_stream[2],\r\n              \".csv\",\r\n              sep = \"\"\r\n            )\r\n          },\r\n          content = function(file) {\r\n            write.csv(data, file)\r\n          }\r\n        )\r\n        \r\n      })\r\n    })\r\n    \r\n    observeEvent(input$closeErrorModal, {\r\n      removeModal()\r\n    })\r\n    \r\n  }\r\n\r\n  \r\n\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
